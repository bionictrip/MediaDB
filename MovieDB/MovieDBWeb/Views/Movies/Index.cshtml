@model PagedList.IPagedList<MovieDB.MovieDBShared.Movie>

@{
    ViewBag.Title = "Movies";
}
@using PagedList.Mvc; 
@using PagedList;
<h2>Movies</h2>
@Html.ActionLink("Refresh Database", "Delete") 
@using (Html.BeginForm("Index", "Movies", routeValues: new {page=1, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort }, method: FormMethod.Get))
{
    <fieldset>
        @Html.TextBox("filter", ViewBag.CurrentFilter as string)
        @Html.Hidden("sortOrder", ViewBag.CurrentSort as string)
        @Html.Hidden("pageSize", ViewBag.PageSize as string)
        <input id="submit" type="submit" value="Search"/>
    </fieldset>
}


@Html.PagedListPager(Model, page => Url.Action("Index", new { page = page, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort, filter = ViewBag.CurrentFilter } ), PagedListRenderOptions.OnlyShowFivePagesAtATime)
<div class="table-responsive">
    <table class="table table-striped" >
        <tr>
            <th>
                @Html.ActionLink("ID", "Index", new { page = Model.PageNumber, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort == "ID" ? "ID desc" : "ID", filter = ViewBag.CurrentFilter })
            </th>
            <th>
                @Html.ActionLink("Type", "Index", new { page = Model.PageNumber, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort == "Type" ? "Type desc" : "Type", filter = ViewBag.CurrentFilter })
            </th>
            <th>
                @Html.ActionLink("Name", "Index", new { page = Model.PageNumber, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort == "Name" ? "Name desc" : "Name", filter = ViewBag.CurrentFilter })
            </th>
            <th>
                @Html.ActionLink("Location", "Index", new { page = Model.PageNumber, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort == "Location" ? "Location desc" : "Location", filter = ViewBag.CurrentFilter })
            </th>
            <th></th>
        </tr>
        @{int num = 1;}
        @foreach (var item in Model)
        {
            <tr>
                <td>
                   @Html.DisplayFor(modelItem => item.ID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location)
                </td>

                @*<td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                        @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                    </td>*@
            </tr>
        }

    </table>
</div>
@Html.PagedListPager(Model, page => Url.Action("Index", new { page = page, pageSize = ViewBag.PageSize, sortOrder = ViewBag.CurrentSort, filter = ViewBag.CurrentFilter }), PagedListRenderOptions.OnlyShowFivePagesAtATime)


<div data-bind='simpleGrid: gridViewModel'>
    </div>

    <script src="~/Scripts/jquery-2.0.3.js"></script>
    <script src="~/Scripts/knockout-3.0.0.debug.js"></script>
    <script src="~/Scripts/knockout.mapping-latest.debug.js"></script>
<script src="~/Scripts/koGrid-2.1.1.debug.js"></script>
<script src="~/Scripts/knockout.simpleGrid.3.0.js"></script>
    <script type="text/javascript">
        var PagedGridModel = function (items) {
            this.items = ko.observableArray(items);

            this.sortByName = function () {
                this.items.sort(function (a, b) {
                    return a.Name < b.Name ? -1 : 1;
                });
            };

            this.jumpToFirstPage = function () {
                this.gridViewModel.currentPageIndex(0);
            };

            this.gridViewModel = new ko.simpleGrid.viewModel(
                {
                    data: this.items,
                    columns: [
                        { headerText: "ID", rowText: "ID" },
                        { headerText: "Type", rowText: "Type" },
                        { headerText: "Name", rowText: "Name" },
                        { headerText: "Location", rowText: "Location" },
                    ],
                    pageSize: 100
                });
        };
        var initData = [];
        $.getJSON("/MovieDbApi/api/Movies", function (data) {
            initData = data;
            ko.applyBindings(new PagedGridModel(initData));
        });
        
        
    </script>
